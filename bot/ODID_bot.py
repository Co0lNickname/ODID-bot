import random

import structlog
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage

from routers.throwing import router as throwing_router
from keyboards.for_throwing import throw_keyboard_button, confirm_participation_button
from settings import telegram_bot_token

logger = structlog.get_logger(__name__)

odid_bot = Bot(token=telegram_bot_token)
storage = MemoryStorage()
dispatcher = Dispatcher(storage=storage)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
group_members_map = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–∏–µ
confirmed_participants = {}

@dispatcher.message(Command('start'))
async def start_handler(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in confirmed_participants:
        confirmed_participants[chat_id] = set()
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —É—á–∞—Å—Ç–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—á–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /finish",
        reply_markup=confirm_participation_button()
    )

@dispatcher.message(lambda message: message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ")
async def confirm_handler(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    if chat_id not in confirmed_participants:
        confirmed_participants[chat_id] = set()
    
    if user_id in confirmed_participants[chat_id]:
        await message.answer(
            f"‚ùå {message.from_user.first_name}, –≤—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    confirmed_participants[chat_id].add(user_id)
    await message.answer(
        f"‚úÖ {message.from_user.first_name}, –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dispatcher.message(Command('finish'))
async def finish_handler(message: types.Message):
    chat_id = message.chat.id
    
    if chat_id not in confirmed_participants or not confirmed_participants[chat_id]:
        await message.answer("‚ùå –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ!")
        return
    
    participants = list(confirmed_participants[chat_id])
    random.shuffle(participants)
    
    if chat_id not in group_members_map:
        group_members_map[chat_id] = {}
    
    for index, user_id in enumerate(participants):
        group_members_map[chat_id][user_id] = index + 1
    
    result_message = "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
    
    for user_id, number in group_members_map[chat_id].items():
        user = await odid_bot.get_chat_member(chat_id, user_id)
        user_name = user.user.first_name
        if user.user.last_name:
            user_name += f" {user.user.last_name}"
        result_message += f"{number}. {user_name}\n"
    
    await message.answer(result_message, reply_markup=throw_keyboard_button())
    
    confirmed_participants[chat_id] = set()

async def run():
    """
    Main loop functions for polling telegram bot
    """
    dispatcher.include_routers(
        throwing_router,
    )

    await odid_bot.delete_webhook(
        drop_pending_updates=True
    )

    await dispatcher.start_polling(
        odid_bot,
        group_members_map=group_members_map
    )